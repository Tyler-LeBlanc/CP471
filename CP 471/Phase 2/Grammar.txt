<program> ::= <fdecls> <declarations> <statement_seq>.

<fdecls> ::= <fdec> <fdecls'>
<fdecls'> ::= ; <fdec> <fdecls'> | ε

<fdec> ::= def <type> <fname> (<params>) <declarations> <statement_seq> fed

`<params> ::= <type> <var> <params'>
<params'> ::= , <type> <var> <params'> | ε

<fname> ::= <id>

<declarations> ::= <decl> <declarations'>
<declarations'> ::= ; <decl> <declarations'> | ε

<decl> ::= <type> <varlist>

<type> ::= int | double

<varlist> ::= <var> <varlist'>
<varlist'> ::= , <var> <varlist'> | ε

<statement_seq> ::= <statement> <statement_seq'>
<statement_seq'> ::= ; <statement> <statement_seq'> | ε

<statement> ::= <var> = <expr> 
		| if <bexpr> then <statement_seq> <else_part> fi
		| while <bexpr> do <statement_seq> od
		| print <expr>
		| return <expr>
		| ε
<else_part> ::= else <statement_seq> | ε

<expr> ::= <term> <expr'>
<expr'> ::= + <term> <expr'> | - <term> <expr'> | ε

<term> ::= <factor> <term'>
<term'> ::= * <factor> <term'> | / <factor> <term'> | % <factor> <term'> | ε

<factor> ::= <var> | <number> | (<expr>) | <fname>(<exprseq>)

<exprseq> ::= <expr> <exprseq'>
<exprseq'> ::= , <expr> <exprseq'> | ε

<bexpr> ::= <bterm> <bexpr'>
<bexpr'> ::= or <bterm> <bexpr'> | ε

<bterm> ::= <bfactor> <bterm'>
<bterm'> ::= and <bfactor> <bterm'> | ε

<bfactor> ::= (<bexpr>) | not <bfactor> | (<expr> <comp> <expr>)

<comp> ::= < | > | == | <= | >= | <>

<var> ::= <id> <var'>
<var'> ::= [<expr>] | ε

<letter> ::= a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z

<digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0

<id> ::= <letter> <id'>
<id'> :: = <letter> <id'> | <digit> <id'> | ε

<number> ::= <integer> | <double>

<integer> ::= <digit> <digits'> <exponent>

<double> ::= <digit> <digits'> . <digit> <digits'> <exponent>

<sign> ::= + | - | ε

<digits'> ::= <digit> <digits'> | ε

<exponent> ::= e <sign> <digit> <digits'> | E <sign> <digit> <digits'> | ε






